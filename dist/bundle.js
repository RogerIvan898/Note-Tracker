/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/public/draw-notes-script.ts":
/*!*****************************************!*\
  !*** ./src/public/draw-notes-script.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.drawNotesScript = void 0;\nconst parser_localStorage_1 = __webpack_require__(/*! ./parser-localStorage */ \"./src/public/parser-localStorage.ts\");\nconst storage_1 = __webpack_require__(/*! ./storage */ \"./src/public/storage.ts\");\nfunction drawNotesScript() {\n    const url = window.location.href;\n    const parts = url.split('/');\n    const urlCategory = parts[parts.indexOf('notes') + 1];\n    const categories = storage_1.LocalStorage.getActiveNotesCategories();\n    let currentCategory;\n    if (urlCategory === 'completed') {\n        currentCategory = JSON.parse(localStorage.getItem('Completed'));\n        console.log(currentCategory);\n    }\n    else {\n        currentCategory = categories.find(category => category.title === urlCategory);\n    }\n    let itemElement = document.getElementsByClassName('show-notes-page-item')[0];\n    for (let note of currentCategory.noteList.getNotes()) {\n        let newItemElement = itemElement.cloneNode(true);\n        newItemElement.style.display = 'flex';\n        newItemElement.getElementsByClassName('show-notes-page-item-note')[0].\n            getElementsByClassName('show-notes-page-item-note-title')[0].textContent = note.getTitle();\n        newItemElement.getElementsByClassName('show-notes-page-item-note')[0].\n            getElementsByClassName('show-notes-page-item-note-description')[0].textContent = note.getDescription();\n        let buttonDeleteNote = newItemElement.\n            getElementsByClassName('show-notes-page-item-buttons-delete')[0];\n        let buttonCompleteNote = newItemElement.\n            getElementsByClassName('show-notes-page-item-buttons-done')[0];\n        if (urlCategory === 'completed') {\n            buttonCompleteNote.style.display = 'none';\n        }\n        note.setHTMLElement(newItemElement);\n        buttonDeleteNote.addEventListener('click', () => {\n            if (urlCategory === 'completed') {\n                storage_1.LocalStorage.deleteCompletedNote(note);\n            }\n            else {\n                storage_1.LocalStorage.deleteActiveNote(note);\n            }\n            newItemElement.remove();\n        });\n        buttonCompleteNote.addEventListener('click', () => {\n            storage_1.LocalStorage.addCompletedNote(note);\n            let completedItem = JSON.parse(localStorage.getItem('Completed'));\n            let completedNotesList = (0, parser_localStorage_1.parseLocalStorageCategoryInNoteList)(completedItem);\n            newItemElement.remove();\n            localStorage.setItem('Completed', JSON.stringify(completedNotesList));\n        });\n        itemElement.after(newItemElement);\n        itemElement = newItemElement;\n        console.log(JSON.parse(localStorage.getItem('Categories')));\n    }\n}\nexports.drawNotesScript = drawNotesScript;\n\n\n//# sourceURL=webpack:///./src/public/draw-notes-script.ts?");

/***/ }),

/***/ "./src/public/index.ts":
/*!*****************************!*\
  !*** ./src/public/index.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NoteList = exports.Note = exports.noteCategoriesInMakeNoteTab = exports.mainScript = void 0;\nfunction mainScript() {\n    let buttonShowNotes = document.getElementsByClassName('header-select')[1];\n    buttonShowNotes.addEventListener('click', () => {\n        window.location.href = 'http://localhost:3000/notes';\n    });\n    let buttonNoteType = document.getElementsByClassName('notes-types-type')[0];\n    if (buttonNoteType) {\n        buttonNoteType.addEventListener('click', () => {\n            window.location.href = 'http://localhost:3000/notes/all';\n        });\n    }\n}\nexports.mainScript = mainScript;\nexports.noteCategoriesInMakeNoteTab = [];\nclass Note {\n    constructor(title, description, type, number) {\n        this.title = title;\n        this.description = description;\n        this.category = type;\n        this.number = number;\n        this.htmlElement = null;\n    }\n    getTitle() {\n        return this.title;\n    }\n    setTitle(value) {\n        this.title = value;\n    }\n    getDescription() {\n        return this.description;\n    }\n    setDescription(value) {\n        this.description = value;\n    }\n    getHTMLElement() {\n        return this.htmlElement;\n    }\n    setHTMLElement(element) {\n        this.htmlElement = element;\n    }\n    getCategory() {\n        return this.category;\n    }\n    setCategory(value) {\n        this.category = value;\n    }\n    getNumber() {\n        return this.number;\n    }\n    setNumber(value) {\n        this.number = value;\n    }\n}\nexports.Note = Note;\nclass NoteList {\n    constructor(noteList) {\n        this.notes = noteList ? noteList.notes : [];\n    }\n    add(note) {\n        if (note instanceof Note) {\n            this.notes.push(note);\n        }\n    }\n    setNotes(noteList) {\n        this.notes = noteList;\n    }\n    getNotes() {\n        return this.notes;\n    }\n    delete(note) {\n        this.notes.splice(this.notes.indexOf(note), 1);\n    }\n    removeElement(element) {\n        console.log(this.notes);\n        let note = this.notes.find(item => item.getHTMLElement() === element);\n        if (note) {\n            this.notes.splice(this.notes.indexOf(note), 1);\n        }\n    }\n    get() {\n        console.log(this.notes);\n    }\n    [Symbol.iterator]() {\n        let index = 0;\n        const notes = this.notes;\n        return {\n            next() {\n                if (index < notes.length) {\n                    const note = notes[index];\n                    index++;\n                    return {\n                        value: note,\n                        done: false,\n                    };\n                }\n                else {\n                    return {\n                        value: undefined,\n                        done: true,\n                    };\n                }\n            },\n        };\n    }\n}\nexports.NoteList = NoteList;\n\n\n//# sourceURL=webpack:///./src/public/index.ts?");

/***/ }),

/***/ "./src/public/make-note-tab.ts":
/*!*************************************!*\
  !*** ./src/public/make-note-tab.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.makeNoteTab = void 0;\nconst storage_1 = __webpack_require__(/*! ./storage */ \"./src/public/storage.ts\");\nconst index_1 = __webpack_require__(/*! ./index */ \"./src/public/index.ts\");\nfunction makeNoteTab() {\n    let pageIsLoaded = false;\n    let buttonNoteTabExit = document.getElementsByClassName('make-note-tab-title-exit')[0];\n    buttonNoteTabExit.addEventListener('click', () => {\n        let makeNoteTab = document.getElementsByClassName('make-note-tab')[0];\n        makeNoteTab.style.clipPath = 'circle(0)';\n    });\n    let buttonSaveNote = document.getElementsByClassName('make-note-tab-button')[0];\n    buttonSaveNote.addEventListener('click', () => {\n        let inputTitle = document.getElementsByClassName('make-note-tab-input')[0];\n        let textAreaDescription = document.getElementsByClassName('make-note-tab-description')[0];\n        let makeNoteTab = document.getElementsByClassName('make-note-tab')[0];\n        if (inputTitle.value) {\n            let chosenCategories = [];\n            for (let noteType of index_1.noteCategoriesInMakeNoteTab) {\n                if (noteType.current) {\n                    chosenCategories.push(noteType.category);\n                }\n            }\n            chosenCategories.push(index_1.noteCategoriesInMakeNoteTab.find(item => item.category === 'all').category);\n            let note = new index_1.Note(inputTitle.value, textAreaDescription.value, chosenCategories, 1);\n            storage_1.LocalStorage.addActiveNote(note, chosenCategories);\n            inputTitle.value = '';\n            textAreaDescription.value = '';\n            makeNoteTab.style.clipPath = 'circle(0)';\n        }\n    });\n    let buttonNoteTabTypeAll = document.getElementsByClassName('make-note-tab-types-type')[0];\n    let buttonsNoteTabTypes = [buttonNoteTabTypeAll];\n    function drawCategoriesInMakeNoteTab() {\n        for (let noteCategory of index_1.noteCategoriesInMakeNoteTab) {\n            if (noteCategory.category !== 'all') {\n                let buttonNoteTypeElement = buttonNoteTabTypeAll.cloneNode(true);\n                buttonNoteTypeElement.style.display = 'flex';\n                buttonNoteTypeElement.children[0].textContent = noteCategory.category;\n                buttonNoteTabTypeAll.after(buttonNoteTypeElement);\n                buttonsNoteTabTypes.push(buttonNoteTypeElement);\n            }\n        }\n        for (let buttonNoteTypeElement of buttonsNoteTabTypes) {\n            buttonNoteTypeElement.addEventListener('click', () => {\n                let type = index_1.noteCategoriesInMakeNoteTab.find(item => item.category === buttonNoteTypeElement.children[0].textContent);\n                type.current = !type.current;\n                if (type.current) {\n                    buttonNoteTypeElement.style.background = 'green';\n                }\n                else {\n                    buttonNoteTypeElement.style.background = 'lightseagreen';\n                }\n            });\n        }\n        pageIsLoaded = true;\n    }\n    if (!pageIsLoaded) {\n        drawCategoriesInMakeNoteTab();\n    }\n}\nexports.makeNoteTab = makeNoteTab;\n\n\n//# sourceURL=webpack:///./src/public/make-note-tab.ts?");

/***/ }),

/***/ "./src/public/notes-category.ts":
/*!**************************************!*\
  !*** ./src/public/notes-category.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.noteCategoriesPage = void 0;\nconst storage_1 = __webpack_require__(/*! ./storage */ \"./src/public/storage.ts\");\nfunction noteCategoriesPage() {\n    let deleteCategories = false;\n    const noteCategoryElements = [];\n    document.addEventListener('DOMContentLoaded', () => {\n        const addCategoryElement = document.\n            getElementsByClassName('notes-categories-serves-add-category')[0];\n        const inputCategoryTitleElement = document.\n            getElementsByClassName('add-category-span-input')[0];\n        const saveCategoryElement = document.\n            getElementsByClassName('add-category-span-save')[0];\n        const completedNotes = document.\n            getElementsByClassName('notes-categories-serves-completed-categories')[0];\n        const deleteNoteCategory = document.\n            getElementsByClassName('notes-categories-serves-delete-category')[0];\n        const noteCategoryElement = document.\n            getElementsByClassName('notes-categories-category')[0];\n        console.log();\n        let reversedCategories = [];\n        let spanAddCategoryActive = false;\n        addCategoryElement.addEventListener('click', () => {\n            const spanElement = document.getElementsByClassName('add-category-span')[0];\n            spanAddCategoryActive = !spanAddCategoryActive;\n            if (spanElement.style.display != 'flex') {\n                spanElement.style.display = 'flex';\n                spanElement.style.width = '13.1%';\n                spanElement.style.animation = 'add-category-span-appear 1s';\n                spanElement.style.marginLeft = '12.7%';\n            }\n            else {\n                hideAddCategorySpan();\n            }\n        });\n        saveCategoryElement.addEventListener('click', () => {\n            if (inputCategoryTitleElement.value) {\n                storage_1.LocalStorage.addCategory(inputCategoryTitleElement.value);\n                hideAddCategorySpan();\n            }\n        });\n        JSON.parse(localStorage.getItem('Categories')).forEach(category => {\n            reversedCategories.unshift(category);\n        });\n        let b = 98;\n        function mouseMoveOver(event) {\n            if (event.target.className === 'notes-categories-category') {\n                event.target.style.borderColor = 'red';\n            }\n            if (event.target.className == 'notes-categories-category-text') {\n                event.target.parentNode.style.borderColor = 'red';\n            }\n        }\n        function mouseMoveOut(event) {\n            if (event.target.className == 'notes-categories-category') {\n                event.target.style.borderColor = 'white';\n            }\n        }\n        function mouseHoverOver(event) {\n            if (event.target.className == 'notes-categories-category') {\n                event.target.style.borderColor = 'mediumseagreen';\n            }\n            if (event.target.className == 'notes-categories-category-text') {\n                event.target.parentNode.style.borderColor = 'mediumseagreen';\n            }\n        }\n        function deleteCategory(element) {\n            if (element.target.className == 'notes-categories-category') {\n                storage_1.LocalStorage.deleteCategory(element.target.childNodes[0].textContent);\n                element.target.remove();\n            }\n            if (element.target.className == 'notes-categories-category-text') {\n                storage_1.LocalStorage.deleteCategory(element.target.textContent);\n                element.target.parentNode.remove();\n            }\n        }\n        deleteNoteCategory.addEventListener('click', () => {\n            const deleteNoteCategorySymbol = document.\n                getElementsByClassName('notes-categories-serves-delete-category-symbol')[0];\n            const deleteNoteCategorySymbolClose = document.\n                getElementsByClassName('notes-categories-serves-delete-category-symbol-close')[0];\n            deleteCategories = !deleteCategories;\n            if (deleteNoteCategorySymbol.style.display !== 'none') {\n                deleteNoteCategory.style.borderColor = 'red';\n                deleteNoteCategorySymbol.style.display = 'none';\n                deleteNoteCategorySymbolClose.style.display = 'flex';\n                document.addEventListener('mouseover', mouseMoveOver);\n                document.addEventListener('mouseout', mouseMoveOut);\n                document.addEventListener('click', deleteCategory);\n            }\n            else {\n                deleteNoteCategorySymbolClose.style.display = 'none';\n                deleteNoteCategorySymbol.style.display = 'flex';\n                deleteNoteCategory.style.borderColor = 'mediumseagreen';\n                document.removeEventListener('mouseover', mouseMoveOver);\n                document.removeEventListener('click', deleteCategory);\n                document.addEventListener('mouseover', mouseHoverOver);\n            }\n        });\n        function hideAddCategorySpan() {\n            const spanElement = document.\n                getElementsByClassName('add-category-span')[0];\n            spanElement.style.animation = 'add-category-span-disappear 1s';\n            spanElement.style.marginLeft = '0.1%';\n            spanElement.style.width = '10%';\n            let animationHandler = () => {\n                spanElement.style.display = 'none';\n                inputCategoryTitleElement.value = '';\n                spanElement.removeEventListener('animationend', animationHandler);\n            };\n            spanElement.addEventListener('animationend', animationHandler);\n        }\n        for (let noteCategory of reversedCategories) {\n            let nextNoteCategoryElement = noteCategoryElement.cloneNode(true);\n            nextNoteCategoryElement.style.display = 'flex';\n            nextNoteCategoryElement.children[0].textContent = noteCategory.title;\n            noteCategoryElement.after(nextNoteCategoryElement);\n            noteCategoryElements.push(nextNoteCategoryElement);\n            nextNoteCategoryElement.addEventListener('click', () => {\n                if (!deleteCategories) {\n                    window.location.href = `http://localhost:3000/notes/${noteCategory.title}`;\n                }\n            });\n        }\n        completedNotes.addEventListener('click', () => {\n            window.location.href = 'http://localhost:3000/notes/completed';\n        });\n    });\n}\nexports.noteCategoriesPage = noteCategoriesPage;\n\n\n//# sourceURL=webpack:///./src/public/notes-category.ts?");

/***/ }),

/***/ "./src/public/notes-controller.ts":
/*!****************************************!*\
  !*** ./src/public/notes-controller.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.noteController = void 0;\nconst index_1 = __webpack_require__(/*! ./index */ \"./src/public/index.ts\");\nfunction noteController() {\n    let categories = [];\n    if (!localStorage.getItem('Categories')) {\n        categories.push({ title: 'all', noteList: new index_1.NoteList() });\n        categories.push({ title: 'gfd', noteList: new index_1.NoteList() });\n        categories.push({ title: 'job', noteList: new index_1.NoteList() });\n        localStorage.setItem('Categories', JSON.stringify(categories));\n    }\n    let categoriesLocalStorage = JSON.parse(localStorage.getItem('Categories'));\n    console.log(localStorage.getItem('Categories'));\n    categoriesLocalStorage.forEach(category => {\n        index_1.noteCategoriesInMakeNoteTab.push({ category: category.title, current: false });\n    });\n    if (!localStorage.getItem('Completed')) {\n        localStorage.setItem('Completed', JSON.stringify({ title: 'Completed', noteList: new index_1.NoteList() }));\n    }\n    const url = window.location.href;\n    const parts = url.split('/');\n    let dynamicCategory = parts[parts.indexOf(\"notes\") + 1];\n    if (dynamicCategory) {\n        fetch(`http://localhost:3000/notes/${dynamicCategory}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: localStorage.getItem('Categories')\n        }).then(response => response.text()).then(data => {\n            console.log(data);\n        });\n    }\n}\nexports.noteController = noteController;\n\n\n//# sourceURL=webpack:///./src/public/notes-controller.ts?");

/***/ }),

/***/ "./src/public/parser-localStorage.ts":
/*!*******************************************!*\
  !*** ./src/public/parser-localStorage.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.addNoteInLocalStorageCategory = exports.parseLocalStorageCategoryInNoteList = void 0;\nconst index_1 = __webpack_require__(/*! ./index */ \"./src/public/index.ts\");\nfunction parseLocalStorageCategoryInNoteList(localStorageCategory) {\n    let newNoteList = new index_1.NoteList();\n    if (localStorageCategory.noteList.notes) {\n        localStorageCategory.noteList.notes.forEach(note => {\n            let newNote = new index_1.Note(note.title, note.description, note.category, note.number);\n            newNoteList.add(newNote);\n        });\n    }\n    localStorageCategory.noteList = newNoteList;\n    return localStorageCategory;\n}\nexports.parseLocalStorageCategoryInNoteList = parseLocalStorageCategoryInNoteList;\nfunction addNoteInLocalStorageCategory(note, categoryTitle) {\n    let localStorageCategories = JSON.parse(localStorage.getItem('Categories'));\n    let category = parseLocalStorageCategoryInNoteList(localStorageCategories.\n        find(category => category.title === categoryTitle));\n    if (category) {\n        category.noteList.add(note);\n    }\n    console.log(category);\n    localStorage.setItem('Categories', JSON.stringify(localStorageCategories));\n}\nexports.addNoteInLocalStorageCategory = addNoteInLocalStorageCategory;\n\n\n//# sourceURL=webpack:///./src/public/parser-localStorage.ts?");

/***/ }),

/***/ "./src/public/script.ts":
/*!******************************!*\
  !*** ./src/public/script.ts ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst notes_controller_1 = __webpack_require__(/*! ./notes-controller */ \"./src/public/notes-controller.ts\");\nconst index_1 = __webpack_require__(/*! ./index */ \"./src/public/index.ts\");\nconst notes_category_1 = __webpack_require__(/*! ./notes-category */ \"./src/public/notes-category.ts\");\nconst draw_notes_script_1 = __webpack_require__(/*! ./draw-notes-script */ \"./src/public/draw-notes-script.ts\");\nconst select_make_note_1 = __webpack_require__(/*! ./select-make-note */ \"./src/public/select-make-note.ts\");\nconst make_note_tab_1 = __webpack_require__(/*! ./make-note-tab */ \"./src/public/make-note-tab.ts\");\nfunction main() {\n    return __awaiter(this, void 0, void 0, function* () {\n        (0, notes_controller_1.noteController)();\n        yield (0, index_1.mainScript)();\n        (0, select_make_note_1.selectMakeNote)();\n        (0, make_note_tab_1.makeNoteTab)();\n    });\n}\nmain();\nconst noteCategoryElement = document.getElementsByClassName('notes-categories-category')[0];\nif (noteCategoryElement) {\n    (0, notes_category_1.noteCategoriesPage)();\n}\nconst noteElement = document.getElementsByClassName('show-notes-page-item')[0];\nif (noteElement) {\n    (0, draw_notes_script_1.drawNotesScript)();\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n    console.log(890);\n}\n\n\n//# sourceURL=webpack:///./src/public/script.ts?");

/***/ }),

/***/ "./src/public/select-make-note.ts":
/*!****************************************!*\
  !*** ./src/public/select-make-note.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.selectMakeNote = void 0;\nfunction selectMakeNote() {\n    let makeNoteTabActive = false;\n    const buttonMakeNote = document.getElementsByClassName('header-select')[0];\n    buttonMakeNote.addEventListener('click', () => {\n        makeNoteTabActive = !makeNoteTabActive;\n        let makeNoteTab = document.getElementsByClassName('make-note-tab')[0];\n        if (makeNoteTabActive) {\n            makeNoteTab.style.clipPath = 'circle(100%)';\n        }\n        else {\n            makeNoteTab.style.clipPath = 'circle(0)';\n        }\n    });\n}\nexports.selectMakeNote = selectMakeNote;\n\n\n//# sourceURL=webpack:///./src/public/select-make-note.ts?");

/***/ }),

/***/ "./src/public/storage.ts":
/*!*******************************!*\
  !*** ./src/public/storage.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LocalStorage = void 0;\nconst parser_localStorage_1 = __webpack_require__(/*! ./parser-localStorage */ \"./src/public/parser-localStorage.ts\");\nconst index_1 = __webpack_require__(/*! ./index */ \"./src/public/index.ts\");\nclass LocalStorage {\n    static addCompletedNote(note) {\n        let localStorageCompletedNotes = this.getCompletedNotes();\n        localStorageCompletedNotes.noteList.add(note);\n        this.deleteActiveNote(note);\n        localStorage.setItem('Completed', JSON.stringify(localStorageCompletedNotes));\n    }\n    static addActiveNote(note, categories) {\n        const activeNotesCategories = this.getActiveNotesCategories();\n        let categoriesForAdd = [];\n        categories.forEach(category => {\n            categoriesForAdd.push(activeNotesCategories.\n                find(item => item.title === category));\n        });\n        if (categoriesForAdd.length) {\n            categoriesForAdd.forEach(category => {\n                category.noteList.add(note);\n            });\n        }\n        localStorage.setItem('Categories', JSON.stringify(activeNotesCategories));\n    }\n    static deleteActiveNote(note) {\n        let localStorageCategories = JSON.parse(localStorage.getItem('Categories'));\n        let categories = [];\n        note.getCategory().forEach(category => {\n            console.log(category);\n            categories.push(localStorageCategories.find(localStorageCategory => localStorageCategory.title === category).title);\n        });\n        categories.forEach(category => {\n            let currentCategory = (0, parser_localStorage_1.parseLocalStorageCategoryInNoteList)(localStorageCategories.\n                find(item => item.title === category));\n            if (currentCategory) {\n                currentCategory.noteList.delete(note);\n            }\n        });\n        localStorage.setItem('Categories', JSON.stringify(localStorageCategories));\n    }\n    static deleteCompletedNote(note) {\n        let completedNotes = this.getCompletedNotes();\n        completedNotes.noteList.delete(note);\n        localStorage.setItem('Completed', JSON.stringify(completedNotes));\n    }\n    static addCategory(categoryTitle) {\n        const localStorageCategories = JSON.parse(localStorage.getItem('Categories'));\n        let category = { title: categoryTitle, noteList: new index_1.NoteList() };\n        localStorageCategories.push(category);\n        localStorage.setItem('Categories', JSON.stringify(localStorageCategories));\n    }\n    static deleteCategory(categoryTitle) {\n        const localStorageCategories = JSON.parse(localStorage.getItem('Categories'));\n        localStorageCategories.splice(localStorageCategories.indexOf(localStorageCategories.\n            find(category => category.title === categoryTitle)), 1);\n        localStorage.setItem('Categories', JSON.stringify(localStorageCategories));\n    }\n    static getCompletedNotes() {\n        const completedNotesObj = JSON.parse(localStorage.getItem('Completed'));\n        const noteList = new index_1.NoteList();\n        completedNotesObj.noteList.notes.forEach(note => {\n            const newNote = new index_1.Note(note.title, note.description, note.category, note.number);\n            noteList.add(newNote);\n        });\n        completedNotesObj.noteList = noteList;\n        return completedNotesObj;\n    }\n    static getActiveNotesCategories() {\n        const activeNotesCategoriesObj = JSON.parse(localStorage.getItem('Categories'));\n        activeNotesCategoriesObj.forEach(category => {\n            const noteList = new index_1.NoteList();\n            category.noteList.notes.forEach(note => {\n                const newNote = new index_1.Note(note.title, note.description, note.category, note.number);\n                noteList.add(newNote);\n            });\n            category.noteList = noteList;\n        });\n        return activeNotesCategoriesObj;\n    }\n}\nexports.LocalStorage = LocalStorage;\n\n\n//# sourceURL=webpack:///./src/public/storage.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/public/script.ts");
/******/ 	
/******/ })()
;